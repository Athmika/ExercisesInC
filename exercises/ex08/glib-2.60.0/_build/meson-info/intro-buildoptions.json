[{"name": "auto_features", "value": "auto", "type": "combo", "section": "core", "choices": ["enabled", "disabled", "auto"], "description": "Override value of all 'auto' features"}, {"name": "backend", "value": "ninja", "type": "combo", "section": "core", "choices": ["ninja", "vs", "vs2010", "vs2015", "vs2017", "xcode"], "description": "Backend to use"}, {"name": "buildtype", "value": "debugoptimized", "type": "combo", "section": "core", "choices": ["plain", "debug", "debugoptimized", "release", "minsize", "custom"], "description": "Build type to use"}, {"section": "core", "type": "boolean", "description": "Debug", "value": true, "name": "debug"}, {"name": "default_library", "value": "shared", "type": "combo", "section": "core", "choices": ["shared", "static", "both"], "description": "Default library type"}, {"section": "core", "type": "integer", "description": "Default umask to apply on permissions of installed files", "value": 18, "name": "install_umask"}, {"name": "layout", "value": "mirror", "type": "combo", "section": "core", "choices": ["mirror", "flat"], "description": "Build directory layout"}, {"name": "optimization", "value": "2", "type": "combo", "section": "core", "choices": ["0", "g", "1", "2", "3", "s"], "description": "Optimization level"}, {"section": "core", "type": "boolean", "description": "Strip targets on install", "value": false, "name": "strip"}, {"name": "unity", "value": "off", "type": "combo", "section": "core", "choices": ["on", "off", "subprojects"], "description": "Unity build"}, {"name": "warning_level", "value": "1", "type": "combo", "section": "core", "choices": ["0", "1", "2", "3"], "description": "Compiler warning level to use"}, {"section": "core", "type": "boolean", "description": "Treat warnings as errors", "value": false, "name": "werror"}, {"name": "wrap_mode", "value": "default", "type": "combo", "section": "core", "choices": ["default", "nofallback", "nodownload", "forcefallback"], "description": "Wrap mode"}, {"section": "backend", "type": "integer", "description": "Maximum number of linker processes to run or 0 for no limit", "value": 0, "name": "backend_max_links"}, {"section": "base", "type": "boolean", "description": "Use -Wl,--as-needed when linking", "value": true, "name": "b_asneeded"}, {"name": "b_colorout", "value": "always", "type": "combo", "section": "base", "choices": ["auto", "always", "never"], "description": "Use colored output"}, {"section": "base", "type": "boolean", "description": "Enable coverage tracking.", "value": false, "name": "b_coverage"}, {"section": "base", "type": "boolean", "description": "Use link time optimization", "value": false, "name": "b_lto"}, {"section": "base", "type": "boolean", "description": "Use -Wl,--no-undefined when linking", "value": true, "name": "b_lundef"}, {"name": "b_ndebug", "value": "false", "type": "combo", "section": "base", "choices": ["true", "false", "if-release"], "description": "Disable asserts"}, {"section": "base", "type": "boolean", "description": "Use precompiled headers", "value": true, "name": "b_pch"}, {"name": "b_pgo", "value": "off", "type": "combo", "section": "base", "choices": ["off", "generate", "use"], "description": "Use profile guided optimization"}, {"section": "base", "type": "boolean", "description": "Build executables as position independent", "value": false, "name": "b_pie"}, {"name": "b_sanitize", "value": "none", "type": "combo", "section": "base", "choices": ["none", "address", "thread", "undefined", "memory", "address,undefined"], "description": "Code sanitizer to use"}, {"section": "base", "type": "boolean", "description": "Build static libraries as position independent", "value": true, "name": "b_staticpic"}, {"section": "compiler", "type": "array", "description": "Extra arguments passed to the C compiler", "value": [], "name": "c_args"}, {"section": "compiler", "type": "array", "description": "Extra arguments passed to the C linker", "value": [], "name": "c_link_args"}, {"name": "c_std", "value": "gnu89", "type": "combo", "section": "compiler", "choices": ["none", "c89", "c99", "c11", "gnu89", "gnu99", "gnu11"], "description": "C language standard to use"}, {"section": "compiler", "type": "array", "description": "Extra arguments passed to the C++ compiler", "value": [], "name": "cpp_args"}, {"section": "compiler", "type": "boolean", "description": "STL debug mode", "value": false, "name": "cpp_debugstl"}, {"section": "compiler", "type": "array", "description": "Extra arguments passed to the C++ linker", "value": [], "name": "cpp_link_args"}, {"name": "cpp_std", "value": "none", "type": "combo", "section": "compiler", "choices": ["none", "c++98", "c++03", "c++11", "c++14", "c++17", "c++1z", "c++2a", "gnu++03", "gnu++11", "gnu++14", "gnu++17", "gnu++1z", "gnu++2a"], "description": "C++ language standard to use"}, {"section": "directory", "type": "string", "description": "Executable directory", "value": "bin", "name": "bindir"}, {"section": "directory", "type": "string", "description": "Data file directory", "value": "share", "name": "datadir"}, {"section": "directory", "type": "string", "description": "Header file directory", "value": "include", "name": "includedir"}, {"section": "directory", "type": "string", "description": "Info page directory", "value": "share/info", "name": "infodir"}, {"section": "directory", "type": "string", "description": "Library directory", "value": "lib/x86_64-linux-gnu", "name": "libdir"}, {"section": "directory", "type": "string", "description": "Library executable directory", "value": "libexec", "name": "libexecdir"}, {"section": "directory", "type": "string", "description": "Locale data directory", "value": "share/locale", "name": "localedir"}, {"section": "directory", "type": "string", "description": "Localstate data directory", "value": "/var/local", "name": "localstatedir"}, {"section": "directory", "type": "string", "description": "Manual page directory", "value": "share/man", "name": "mandir"}, {"section": "directory", "type": "string", "description": "Installation prefix", "value": "/usr/local", "name": "prefix"}, {"section": "directory", "type": "string", "description": "System executable directory", "value": "sbin", "name": "sbindir"}, {"section": "directory", "type": "string", "description": "Architecture-independent data directory", "value": "/var/local/lib", "name": "sharedstatedir"}, {"section": "directory", "type": "string", "description": "Sysconf data directory", "value": "etc", "name": "sysconfdir"}, {"section": "user", "type": "boolean", "description": "link with -Bsymbolic-functions if supported", "value": true, "name": "bsymbolic_functions"}, {"section": "user", "type": "string", "description": "directory for charset.alias dir (default to 'libdir' if unset)", "value": "", "name": "charsetalias_dir"}, {"section": "user", "type": "boolean", "description": "include tracing support for dtrace", "value": false, "name": "dtrace"}, {"section": "user", "type": "boolean", "description": "Use fam for file system monitoring", "value": false, "name": "fam"}, {"section": "user", "type": "boolean", "description": "Also use posix threads in case the platform defaults to another implementation (on Windows for example)", "value": false, "name": "force_posix_threads"}, {"section": "user", "type": "string", "description": "load gio modules from this directory (default to 'libdir/gio/modules' if unset)", "value": "", "name": "gio_module_dir"}, {"section": "user", "type": "boolean", "description": "use gtk-doc to build documentation", "value": false, "name": "gtk_doc"}, {"name": "iconv", "value": "libc", "type": "combo", "section": "user", "choices": ["libc", "gnu", "native"], "description": "iconv implementation to use ('libc' = 'Part of the C stdlib'; 'gnu' = 'GNU's iconv'; 'native' = 'A separate iconv')"}, {"section": "user", "type": "boolean", "description": "enable installed tests", "value": false, "name": "installed_tests"}, {"section": "user", "type": "boolean", "description": "whether to use internal PCRE", "value": false, "name": "internal_pcre"}, {"section": "user", "type": "boolean", "description": "libffi:ffi-debug", "value": false, "name": "libffi:ffi-debug"}, {"section": "user", "type": "boolean", "description": "libffi:pax_emutramp", "value": false, "name": "libffi:pax_emutramp"}, {"section": "user", "type": "boolean", "description": "libffi:purify_safety", "value": false, "name": "libffi:purify_safety"}, {"section": "user", "type": "boolean", "description": "libffi:raw_api", "value": true, "name": "libffi:raw_api"}, {"section": "user", "type": "boolean", "description": "libffi:structs", "value": true, "name": "libffi:structs"}, {"section": "user", "type": "boolean", "description": "build with libmount support", "value": true, "name": "libmount"}, {"section": "user", "type": "boolean", "description": "generate man pages (requires xsltproc)", "value": false, "name": "man"}, {"name": "nls", "value": "auto", "type": "combo", "section": "user", "choices": ["enabled", "disabled", "auto"], "description": "Enable native language support (translations)"}, {"section": "user", "type": "string", "description": "install runtime libraries relative to libdir", "value": "", "name": "runtime_libdir"}, {"name": "selinux", "value": "auto", "type": "combo", "section": "user", "choices": ["enabled", "disabled", "auto"], "description": "build with selinux support"}, {"section": "user", "type": "boolean", "description": "include tracing support for systemtap", "value": false, "name": "systemtap"}, {"section": "user", "type": "string", "description": "path where systemtap tapsets are installed", "value": "", "name": "tapset_install_dir"}, {"section": "user", "type": "boolean", "description": "build with xattr support", "value": true, "name": "xattr"}, {"section": "user", "type": "boolean", "description": "Build a minimal zlib without file I/O API", "value": false, "name": "zlib:solo"}, {"section": "test", "type": "boolean", "description": "Whether to print the logs from failing tests", "value": true, "name": "errorlogs"}, {"section": "test", "type": "boolean", "description": "Split stdout and stderr in test logs", "value": true, "name": "stdsplit"}]